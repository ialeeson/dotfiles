# -*- lexical-binding: t; -*-
#+OPTIONS: toc:nil
#+STARTUP: overview

My evolving literate configuration of my emacs fork for macOS Sequoia. I add additional xwidget-webkit features based on kchanqvq's [[https://github.com/kchanqvq/xwwp.git][xwwp-full]] fork and patches to [[https://github.com/d12frosted/homebrew-emacs-plus.git][homebrew-emacs-plus]].

I manage packages with built-in ~package.el~. Packages can installed manually with ~package-install~. Alternatively, ~use-package~ can install them automatically.
#+begin_src emacs-lisp :tangle no :eval never 
  (setq use-package-always-ensure t)
#+end_src

* early-init.el
Set display attributes before initialization of an emacs frame. Use rounded frames with a transparent title-bar and no icons.
#+begin_src emacs-lisp :tangle yes :results none
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (setq ns-use-proxy-icon nil)
#+end_src

Disable unwanted UI features.
#+begin_src emacs-lisp :tangle yes :results none
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

Set a large and wide coding font.
#+begin_src emacs-lisp :tangle yes :results none
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 160)
#+end_src

Disable startup-up warnings and splash screen.
#+begin_src emacs-lisp :tangle emacs/early-init.el :results none
  (setq inhibit-startup-message t)
  (setq warning-minimum-level :error)
#+end_src

* initialization
Start a server and enable lexical binding.
#+begin_src emacs-lisp :tangle yes :results none
  ;; -*- lexical-binding: t; -*-
  (server-start)
  (setq-default use-package-vc-prefer-newest t)
#+end_src

Enable local variables to be set by files.
#+begin_src emacs-lisp :tangle yes :results none
  (setq enable-local-variables t)
#+end_src

Enable recursive minibuffers.
#+begin_src emacs-lisp :tangle yes :results none
  (setq enable-recursive-minibuffers t)
#+end_src

Load Emacs path from SHELL PATH. 
#+begin_src emacs-lisp :tangle yes :results none
  (use-package exec-path-from-shell
    :init (when (memq window-system '(mac ns x))
  	  (exec-path-from-shell-initialize)))
#+end_src

Add a custom lisp directory to the load-path.
#+begin_src emacs-lisp :tangle yes :results none
  (add-to-list 'load-path "~/.config/emacs/lisp")
#+end_src

Load remaining configuration.
#+begin_src emacs-lisp :tangle emacs/init.el :results none
  (load "~/.config/README")
#+end_src

* ui
Pretty symbols!
#+begin_src emacs-lisp :tangle yes :results none
  (global-prettify-symbols-mode nil)
#+end_src
** mode-line and header-line
Display buffer information in a header-line gray. Set mode-line to a gray horizontal divider.
#+begin_src emacs-lisp :tangle yes :results none
  (setq-default header-line-format '("%e" mode-line-front-space
  				   (:propertize ("" mode-line-mule-info
  						 mode-line-client
  						 mode-line-modified
  						 mode-line-remote
  						 mode-line-window-dedicated)
  						display (min-width (6.0)))
  				   "  " mode-line-buffer-identification
  				   "   " mode-line-position
  				   (project-mode-line project-mode-line-format)
  				   "  " mode-line-modes
  				   mode-line-misc-info
  				   mode-line-end-spaces))
  (setq-default mode-line-format "")
  (custom-set-faces '(header-line ((t (:background "gray85" :height 150 :underline t)))))
  (custom-set-faces '(mode-line ((t (:foreground "gray40" :height 5 :underline t)))))
#+end_src

** theme
Load the light theme and minimalistic nano-theme with customizations.
#+begin_src emacs-lisp :tangle emacs/init.el :results none
  (setq custom-file "~/.config/emacs/custom.el")
  (load custom-file)
  (use-package nano-theme
    :init (load-theme 'nano-light))
#+end_src

Add narrow dividers between windows.
#+begin_src emacs-lisp :tangle yes :results none
  (setq window-divider-default-right-width 2)
  (setq window-divider-default-bottom-width 2)
  (window-divider-mode nil)
#+end_src

** cursor
Set cursor-type to display cursor in posframes and child-frames. 
#+begin_src emacs-lisp :tangle emacs/early-init.el :results none
  (blink-cursor-mode -1)
  (setq-default cursor-type 'box)
#+end_src

Flash the cursor when moving across windows or many lines.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package beacon
    :init (beacon-mode nil)
    :custom ((beacon-blink-delay 0.1)
  	   (beacon-size 15)))
#+end_src

* window configuration

Allow side windows around inner frame.
#+begin_src emacs-lisp :tangle yes :results none
  (setq window-sides-slots '(1 1 1 1))
#+end_src

Quickly switch to buffers. Quickly switch to another window.
#+begin_src emacs-lisp :tangle yes :results none
  (global-set-key (kbd "C-o") #'other-window)
  (global-set-key (kbd "M-o") #'switch-to-other-buffer)
#+end_src

Split windows horizontally.
#+begin_src emacs-lisp :tangle yes :results none
  (setq split-width-threshold 0)
  (setq split-height-threshold nil)
#+end_src

** popper
Add support for popups with [[https://github.com/karthink/popper][popper.el]]. 
#+begin_src emacs-lisp :tangle yes :results none
  (use-package popper
    :custom ((popper-display-control nil))
    :defines (popper-reference-buffers)
    :bind (("C-'"   . popper-toggle)
    	 ("M-'"   . popper-cycle)
    	 ("C-M-'" . popper-toggle-type))
    :config
    (popper-mode nil)
    (defun switch-to-other-buffer ()
      (interactive)
      (when-let ((buffer (--find (and (null (popper-popup-p it))
    				    (null (minibufferp it)))
      			       (cdr (buffer-list)))))
        (switch-to-buffer buffer))))
#+end_src

** display buffer rules
Display Info and help-mode in a right pop-up window.
#+begin_src emacs-lisp :tangle yes :results none
  (add-to-list 'display-buffer-alist `((or (derived-mode . help-mode)
  					 (derived-mode . Info-mode)
  					 (derived-mdoe . Man-mode))
  				     (display-buffer-in-side-window)
  				     (side . right)
  				     (window-width . 82)
  				     (body-function . select-window)))
  (with-eval-after-load 'popper
    (add-to-list 'popper-reference-buffers 'Info-mode)
    (add-to-list 'popper-reference-buffers 'help-mode)
    (add-to-list 'popper-reference-buffers 'Man-mode))
#+end_src


Compilation, messages, warnings and errors are not pop-ups and are displayed in a bottom side-window.
#+begin_src emacs-lisp :tangle yes :results none
  (add-to-list 'display-buffer-alist `((or (derived-mode . messages-buffer-mode)
    					 (derived-mode . compilation-mode)
    					 (derived-mode . comint-mode)
    					 "\\*Messages\\*"
    					 "\\*Warnings\\*"
    					 "\\*Async Shell Command\\*")
    				     (display-buffer-in-side-window)
    				     (side . bottom)
    				     (body-function . select-window)))
  (with-eval-after-load 'shell
    (keymap-set shell-command-mode-map "q" #'quit-window))
#+end_src

* completion
** orderless
Filter completion candidates with an [[https://github.com/oantolin/orderless][orderless]] style.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package orderless
    :custom (completion-styles '(orderless basic)))
#+end_src

** completion ui
Pop-up completion candidates in a [[https://github.com/minad/corfu][corfu.el]] frame. Enter a ~corfu-separator~ to filter candidates in an orderless style.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package corfu
    :init (global-corfu-mode nil)
    :custom ((corfu-auto t)
  	   (corfu-auto-delay 0.35)
  	   (corfu-auto-prefix 3))
    :bind (:map corfu-map
  	      ("RET" . nil)
  	      ("C-SPC" . corfu-insert-separator)))
#+end_src

Preview the leading candidate in the current buffer.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package completion-preivew
    :init (global-completion-preview-mode nil)
    :bind (:map completion-preview-active-mode-map
  	      ("M-n" . completion-preview-next-candidate)
  	      ("M-p" . completion-preview-prev-candidate))
    :config
    (push 'org-self-insert-command completion-preview-commands))
#+end_src

** cape
Add completion sources globally for:
- text in open buffers (dabbrev)
- file paths when in a string
- words when in comments (dict)
- keywords when in code.
Order matters: candidates from the first source to evaluate non-nil are returned. The ~cape-elisp-symbol~ completes based on context, but fails with the ~use-package~ macro. ~cape-elisp-block-symbol~ is preferred when within a literate configuration file.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package cape
    :config
    (setq-default completion-at-point-functions `(cape-elisp-symbol
  						cape-elisp-block-symbol
  						cape-dabbrev  						      
  						cape-keyword
  						,(cape-capf-inside-comment 'cape-dict)
  						cape-file))
    (defun cape-elisp-block-symbol (&optional interactive)
      (if (cape--inside-block-p "elisp" "emacs-lisp")
  	(let ((cape--elisp-symbol-properties (remq :exit-function cape--elisp-symbol-properties)))
  	  (cape-elisp-symbol interactive)))))
#+end_src

* minibuffer
** which-key
Pop-up key-chord options at bottom of frame.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package which-key
    :custom ((which-key-show-early-on-C-h t)
  	   (which-key-popup-type 'side-window)
  	   (which-key-side-window-location 'bottom)
  	   (which-key-side-window-max-width 0.25))
    :init
    (which-key-mode)
    (which-key-setup-side-window-bottom))
#+end_src

** vertico
Show completions in a [[https://github.com/minad/vertico][vertico]] minibuffer.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package vertico
    :custom (vertico-count 15)
    :init (vertico-mode nil))
#+end_src

Pop completion minibuffer to a [[https://github.com/tumashu/vertico-posframe][vertico-posframe]] at the top of the frame.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package vertico-posframe
    :init (vertico-posframe-mode nil)
    :custom ((vertico-posframe-poshandler 'posframe-poshandler-frame-top-center)
  	   (vertico-posframe-border-width 2)
  	   (vertico-posframe-parameters '((left-fringe . 7)
  					  (right-fringe . 7)))))
#+end_src

** marginalia
Add annotations to completions with [[https://github.com/minad/marginalia][marginalia.el]].
#+begin_src emacs-lisp :tangle yes :results none
  (use-package marginalia
    :init (marginalia-mode nil))
#+end_src

** consult
Load consult and replace common tools with consult counterparts. Preview completion candidate on key-press.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package consult
    :custom ((consult-narrow-key "<")
  	   (consult-preview-key "M-."))
    :commands (consult-dir)
    :autoload (consult--multi consult--read)
    :bind (;; C-c bindings
  	 ("C-c M-x" . consult-mode-command)
  	 ("C-c h" . consult-history)
  	 ("C-c m" . consult-man)
  	 ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)
  	 ;; C-x bindings
  	 ("C-x M-:" . consult-complex-command)
  	 ("C-x b" . consult-buffer)
  	 ("C-x r b" . consult-bookmark)
  	 ;; M-s bindings
  	 ("M-s g" . consult-grep)
  	 ("M-s G" . consult-git-grep)
  	 ("M-s r" . consult-ripgrep)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consul-line-multi)
  	 ("M-s k" . consult-keep-lines)
  	 ("M-s u" . consult-focus-lines)
  	 ("M-s e" . consult-isearch-history)
  	 ;; M-g bindings
  	 ("M-g i" . consult-imenu)
  	 ("M-g I" . consult-imenu-multi)
  	 ("M-g o" . consult-outline)
  	 :map isearch-mode-map
  	 ("M-e" . consult-isearch-history)
  	 ("M-s e" . consult-isearch-history)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)
  	 :map minibuffer-local-map
  	 ("M-s" . consult-history)
  	 ("M-r" . consult-history)))

#+end_src

* programming
** terminal emulation
Remove header line from terminal emulator buffers.
#+begin_src emacs-lisp :tangle yes :results none
  (defun remove-header-line () (setq-local header-line-format nil))
  (add-hook 'eshell-mode-hook 'remove-header-line)
  (add-hook 'eat-mode-hook 'remove-header-line)
#+end_src

** version control
*** magit
#+begin_src emacs-lisp :tangle yes :results none
  (use-package magit)
#+end_src
** eldoc-box
Configure [[https://github.com/casouri/eldoc-box][eldoc-box]].
#+begin_src emacs-lisp :tangle yes :results none
  (use-package eldoc-box
    :vc (eldoc-box :url "https://github.com/casouri/eldoc-box.git")
    :custom ((eldoc-idle-delay 0.4)
  	   (eldoc-box-clear-with-C-g t)
  	   (eldoc-box-only-multi-line nil))
    :hook ((eldoc-mode . eldoc-box-hover-mode)))
#+end_src

** tree-sitter
Find the parent node at point.
#+begin_src emacs-lisp :tangle yes :results none
  (defun treesit-parent-node-at (pt)
    (let* ((node (treesit-node-at pt)))
      (treesit-parent-while node (lambda (node)
  				 (eq (treesit-node-start node) pt)))))
#+end_src

** snippets and code expansion
*** abbrev
Enable code expansion in supported modes.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package abbrev
    :hook ((org-mode . abbrev-mode)
  	 (emacs-lisp-mode . abbrev-mode)
  	 (julia-mode . abbrev-mode)))
#+end_src

*** tempel
Automatically expand snippets by hooking into abbrev.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package tempel
    :hook (abbrev-mode . tempel-abbrev-mode))
#+end_src

** org-mode
Load Org branch with [[https://abode.karthinks.com/org-latex-preview/][org-latex-preview]] before other possible dependencies. Unbind keys for use with popper. Enable short keybindings for TeX input.
#+begin_src emacs-lisp :tangle emacs/init.el :results none
  (use-package org-mode
    :vc (org-mode :url "https://code.tecosaur.net/tec/org-mode"
  		:lisp-dir "lisp/")
    :hook ((org-mode . org-latex-preview-auto-mode))
    :custom ((org-latex-preview-live t)
  	   (org-latex-preview-live-debounce 0.25)
  	   (org-special-ctrl-a/e t)
  	   (org-special-ctrl-k t))
    :bind (("C-c C-s" . org-store-link))
    :config
    (unbind-key "C-'" org-mode-map)
    (unbind-key "M-'" org-mode-map))
  #+end_src

Transpose sexps within org blocks.
#+begin_src emacs-lisp :tangle yes :results none
  (with-eval-after-load 'org
    (defun org-transpose-sexps (arg)
      (interactive "p")
      (if (org-in-src-block-p t)
  	(transpose-sexps arg)
        (org-transpose-element)))
    (keymap-set org-mode-map "C-M-t" #'org-transpose-sexps))
#+end_src

Enable quick insertion of code blocks in Org mode. Add capture template for emacs-lisp with tangling. Evaluate blocks without confirmation.
#+begin_src emacs-lisp :tangle yes :results none
  (setq org-structure-template-alist '(("e" . "src emacs-lisp :tangle yes :results none")))
  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)
#+end_src

*** org-eldoc
Display eldoc documentation in org source blocks with [[https://github.com/msnoigrs/org-mode/blob/1062c63ee166d815e99a5f8ae864a0a854c9415f/contrib/lisp/org-eldoc.el][org-eldoc.el]]. Fix a breaking change to eldoc with around advice.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package org-eldoc
    :after org
    :init (advice-add #'org-eldoc-documentation-function
  		    :around (lambda (fun &optional callback) (funcall fun))))
#+end_src

*** org-appear
Show hidden org contents.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package org-appear
    :vc (:url "https://github.com/awth13/org-appear.git")
    :hook (org-mode . org-appear-mode)
    :custom ((org-appear-autolinks t)))
#+end_src

*** export
Open exported HTML documents Webkit. htmlize is required for syntax-highlighting.
#+begin_src emacs-lisp :tangle yes :results none
    (use-package htmlize)
    (add-to-list 'org-file-apps
  	       '("\\`.*html\\'" . (lambda (path link) (xwidget-webkit-browse-url (format "file://%s" path)))))
#+end_src

** elisp
String manipulation.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package s
    :vc (:url "https://github.com/magnars/s.el.git"))
#+end_src

** julia

*** julia-snail
Julia Snail provides completion-at-point via a Julia server, obviating LSPs.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package julia-snail
    :vc (:url "https://github.com/gcv/julia-snail.git")
    :after (s)
    :hook ((julia-ts-mode . julia-snail-mode)
  	 (julia-snail-mode . setup-julia-snail-with-ts))
    :custom ((julia-snail-extra-args "--color=yes")
  	   (julia-snail-use-emoji-mode-lighter nil)
  	   (julia-snail-terminal-type :eat)
  	   (julia-snail-imenu-style nil)
  	   (julia-snail-extensions '(ob-julia)))
    :config
    (with-eval-after-load 'popper
      (add-to-list 'popper-reference-buffers "\\*julia\\*")))
#+end_src

*** julia-ts-mode
A Julia tree-sitter enables rapid syntax highlighting and structural editing.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package julia-ts-mode
    :vc (:url "https://github.com/JuliaEditorSupport/julia-ts-mode.git"))
#+end_src

*** julia-snail and julia-ts-mode integration
#+begin_src emacs-lisp :tangle yes :results none
  (defun setup-julia-snail-with-ts ()
    ;; revert to native treesitter imenu
    (setq-local imenu-create-index-function #'treesit-simple-imenu)
    (setq-local treesit-simple-imenu-settings `(("Function" "\\`function_definition\\'" nil nil)
  					      ("Method" "\\`assignment\\'" (lambda (node)
  									     (treesit-parent-while node 
  												   ("Struct" "\\`struct_definition\\'" nil nil)
  												   ("Type" "\\`abstract_definition\\'" nil nil)
  												   ("Loop" "\\`for_statement\\'" nil nil)
  												   ("Comprehension" ,(rx string-start (or "parenthesized_expresion" "comprehension_expression") string-end)
  												    nil nil)))))))
#+end_src

*** ob-julia
Org-mode source block integration.
#+begin_src emacs-lisp :tangle yes :results none
  (with-eval-after-load 'org
    (add-to-list 'org-babel-load-languages '(julia . t))
    (add-to-list 'org-babel-tangle-lang-exts '("julia" . "jl")))
  (with-eval-after-load 'julia-snail
    (add-hook 'julia-snail/ob-julia-interaction-mode-hook
  	    (lambda () (advice-remove 'org-ctrl-c-ctrl-c #'julia-snail/ob-julia--around-ctrl-c-ctrl-c))))
#+end_src

** R
#+begin_src emacs-lisp :tangle yes :results none
  (use-package ess)
#+end_src

** LaTeX
Load auctex and cdlatex.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package cdlatex
    :hook (org-mode . turn-on-org-cdlatex)
    :init (setq cdlatex-command-alist '(("il" "Insert in-line math delimiters" "\\( ? \\)" cdlatex-position-cursor nil t nil)
  				      ("dm" "Insert in-line math delimiters" "\\[ ? \\]" cdlatex-position-cursor nil t nil))))
#+end_src

* system
** mail
By default, mail will be sent from ~my-primary-mail-address~ by ~my-full-name~. ~my-mail-addresses~ configures the retrieval (via imap) and sending (via smtp) of mail from alternative addresses.
#+begin_src emacs-lisp :tangle yes :results none
  (defvar my-primary-mail-address nil)
  (defvar my-full-name nil)
  (defvar my-mail-addresses nil "An alist of pairs whose car is a mail addresses and whose cdr is a plist containing :smtp-header and gnus-nnimap variables.")
  (load "mail-secrets.el")
  (setq user-mail-address my-primary-mail-address
        user-full-name my-full-name)
#+end_src

*** message
Alternative addresses are removed from headers when replying to mail.
#+begin_src emacs-lisp :tangle yes :results none
  (setq message-dont-reply-to-names (mapcar #'car my-mail-addresses))
#+end_src

Require confirmation to send, but not to kill messages.
#+begin_src emacs-lisp :tangle yes :results none
  (setq message-confirm-send t
        message-kill-buffer-query nil)
#+end_src

Add the appropriate smtp-header before sending a message.
#+begin_src emacs-lisp :tangle yes :results none
  (defun message-add-smtp-header ()
    (interactive)
    (save-excursion
      (message-goto-from)
      (push-mark)
      (message-beginning-of-line)
      (cl-loop for pair in my-mail-addresses
  	     when (search-forward-regexp (rx (literal (car pair))) (mark) t)
  	     return (message-add-header (format "X-Message-SMTP-Method: %s"
  						(gethash :smtp-header (cdr pair)))))))

  (add-hook 'message-send-hook #'message-add-smtp-header)
#+end_src

*** address book
Store mail contacts with [[https://github.com/girzel/ebdb][ebdb.el]]. Save on exit. Query to save addresses on sent mail. Bind keys to add addresses from mail in gnus.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package ebdb
    :custom ((ebdb-mua-auto-update-p 'query)
  	   (ebdb-save-on-exit t))
    :config
    (require 'ebdb-gnus)
    (require 'ebdb-message))
#+end_src

*** gnus
Launch globally with "s-g".
#+begin_src emacs-lisp :tangle yes :results none
  (global-set-key (kbd "s-g") #'gnus)
#+end_src

Hide article headers.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq gnus-treat-hide-boring-headers 'head)
  (setq gnus-boring-article-headers '(reply-to newsgroups to-address to-list cc-list date long-to many-to))
#+end_src

Use full window.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq gnus-use-full-window t)
#+end_src

Set ~my-primary-mail-address~ as the default mail source. Use gmail defaults in the absence of nnimap variables in ~my-mail-addresses~.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (when-let* ((address my-primary-mail-address)
  	    (hash (cdr (assoc-string address my-mail-addresses)))
  	    (imap-inbox (gethash :imap-inbox hash "INBOX"))
  	    (imap-expiry-target (gethash :imap-expiry-target hash "Trash"))
  	    (imap-login (gethash :imap-login hash address))
  	    (imap-stream (gethash :imap-stream hash 'ssl))
  	    (imap-server (gethash :imap-server hash "gmail.smtp.com"))
  	    (imap-port (gethash :imap-port hash 993)))
    (setq gnus-select-method `(nnimap "mail"
  				    (nnimap-inbox ,imap-inbox)
  				    (nnimap-expiry-target ,imap-expiry-target)
  				    (nnimap-user ,imap-login)
  				    (nnimap-address ,imap-server)
  				    (nnimap-stream ,imap-stream)
  				    (nnimap-server-port ,imap-port))))
#+end_src

Additional client-side splitting of mail via IMAP. 
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq nnimap-split-methods 'default
        gnus-search-use-parsed-queries t)
#+end_src

Expire mail aggressviely. Move mail to expiry-target once caught-up, deleted, read or expired. To persist mail tick, mark as dormant or move to an archive (excluded from auto-expirable newsgroups).
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq nnimap-expunge 'on-exit
        nnmail-expiry-wait 'immediate
        gnus-total-expirable-newsgroups "INBOX\\|Folders\\/news\\|Folders\\/admin\\|Folders\\/memo"
        gnus-auto-expirable-marks `(,gnus-catchup-mark ,gnus-expirable-mark ,gnus-del-mark ,gnus-read-mark))
#+end_src

When replying to mail set from header based on receiver.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq gnus-posting-styles (--map `((header "to" ,(rx (literal (car it))))
  				   (address ,(car it)))
  				 my-mail-addresses))
#+end_src

Render HTML mail with w3m. Browse HTML parts in Webkit.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq mm-text-html-renderer 'gnus-w3m)
  (advice-add #'gnus-article-browse-html-parts
  	    :around (lambda (fun list &optional header)
  		      (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
  			(funcall fun list header))))
#+end_src

Re-enable quick switching between windows.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (unbind-key "C-o" gnus-summary-mode-map)
  (unbind-key "C-o" gnus-group-mode-map)
#+end_src

Set a minimal summary line format. Display name or address or sender.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq gnus-summary-line-format "%1{%U%R%} %I %2{%[ %ui %]%} %3{%s%}\n"
        gnus-face-1 'bold
        gnus-face-2 'font-lock-string-face
        gnus-face-3 'italic)

  (defun gnus-user-format-function-i (header)
    (let ((string (aref header 2)))
      (when (string-match (rx (* "\"") (group (* (or alpha digit space)))
  			    (* (or "\"" space)) (group (* (or punct alpha digit))))
  			string)
        (or (match-string 1 string) (match-string 2) string))))
#+end_src

Auto-save gnus sessions.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (setq gnus-always-read-dribble-file t)
#+end_src

Enable lazy reading of articles provided by trusted RSS feeds in browser. It is recommended to configure the browser ~readability.js~. ~gnus-summary-preview-mode~ automatically opens the last link, which is typically a link to the article.
#+begin_src emacs-lisp :tangle ~/.gnus.el :results none
  (keymap-set gnus-summary-mode-map "w" #'gnus-summary-browse-url-quick)
  (keymap-set gnus-summary-mode-map "W" #'gnus-summary-preview-mode)

  (defun gnus-summary-browse-url-quick (&optional external)
      (interactive "P" gnus-summary-mode)
      (if-let* ((url (car (last (gnus-collect-urls-from-article)))))
          (funcall (if external browse-url-secondary-browser-function browse-url-browser-function)
    	       url nil)
        (message "No URLs found.")))

  (define-minor-mode gnus-summary-preview-mode ()
    :init-value nil
    (if gnus-summary-preview-mode
        (progn (gnus-summary-browse-url-quick)
    	     (add-hook 'gnus-article-prepare-hook #'gnus-summary-browse-url-quick))
      (remove-hook 'gnus-article-prepare-hook #'gnus-summary-browse-url-quick)))
#+end_src

** file management
*** consult-dir
Quickly to navigate to or insert directory into minibuffer.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package consult-dir
    :vc (:url "https://github.com/karthink/consult-dir.git")
    :after (consult)
    :bind ("C-x C-d" . consult-dir))
#+end_src

*** recentf
Record recently visited files.
#+begin_src emacs-lisp :tangle yes :results none
  (recentf-mode nil)
#+end_src

*** dired
Display dired buffers in a side-window. Kill new dired buffers.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package dired
    :custom ((dired-kill-when-opening-new-dired-buffer t))
    :bind (:map dired-mode-map
  	      ("C-o" . nil))
    :init (add-to-list 'display-buffer-alist '((major-mode . dired-mode)
    					     (display-buffer-in-side-window)
    					     (side . left)
    					     (window-width . 80))))
  (with-eval-after-load 'popper
    (add-to-list 'popper-reference-buffers 'dired-mode))
#+end_src

*** dired-preview
Preview file under cursor in dired. Ignore directories.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package dired-preview
    :init (dired-preview-global-mode nil)
    :custom ((dired-preview-ignored-show-ignored-placeholders nil)
  	   (dired-preview-ignored-extensions-regexp (rx (or "." "gz" "zst" "tar" "xz" "rar" "zip" "iso" "epub")))
  	   (dired-preview-delay 0.5))
    :config
    ;; ignore directories
    (advice-add 'dired-preview--file-ignored-p
  	      :before-until (lambda (file)
  			      (file-directory-p file))))
#+end_src

** launcher
*** applications
Define sources for macOS applications.
#+begin_src emacs-lisp :tangle yes :results none
  ;;; User applications live in /Applications
  (defvar consult--source-user-applications
    `( :items (lambda () (mapcar #'file-name-base
  			       (directory-files "/Applications" t ".*.app\\'")))
       :name "User Applications"
       :narrow ,?a
       :category application
       :action open-application))

  ;;; System applications live in /System/Applications
  (defvar consult--source-system-applications
    `( :items (lambda () (mapcar #'file-name-base
  			       (directory-files "/System/Applications" t ".*app\\'")))
       :narrow ,?s
       :name "System Applications"
       :category application
       :action open-application))
#+end_src

Define a function to launch applications.
#+begin_src emacs-lisp :tangle yes :results none
  (defun open-application (name)
    (interactive "sName: ")
    (make-process :name "open-application"
  		:command `("open" "-a" ,name)))
#+end_src

*** preferences
Define a source for macOS system preferences.
#+begin_src emacs-lisp :tangle yes :results none
  (defvar consult--source-system-preferences
    `( :name "Preferences"
       :action open-system-preferences
       :narrow ,?p
       :items ("com.apple.ClassroomSettings"
  	     "com.apple.Localization"
  	     "com.apple.preference.datetime"
  	     "com.apple.preference.desktopscreeneffect"
  	     "com.apple.preference.digihub.discs"
  	     "com.apple.preference.displays"
  	     "com.apple.preference.dock"
  	     "com.apple.preference.energysaver"
  	     "com.apple.preference.expose"
  	     "com.apple.preference.general"
  	     "com.apple.preference.ink"
  	     "com.apple.preference.keyboard"
  	     "com.apple.preference.mouse"
  	     "com.apple.preference.network"
  	     "com.apple.preference.notifications"
  	     "com.apple.preference.printfax"
  	     "com.apple.preference.screentime"
  	     "com.apple.preference.security"
  	     "com.apple.preference.sidecar"
  	     "com.apple.preference.sound"
  	     "com.apple.preference.speech"
  	     "com.apple.preference.spotlight"
  	     "com.apple.preference.startupdisk"
  	     "com.apple.preference.trackpad"
  	     "com.apple.preference.universalaccess"
  	     "com.apple.preferences.AppleIDPrefPane"
  	     "com.apple.preferences.appstore"
  	     "com.apple.preferences.Bluetooth"
  	     "com.apple.preferences.configurationprofiles"
  	     "com.apple.preferences.extensions"
  	     "com.apple.preferences.FamilySharingPrefPane"
  	     "com.apple.preferences.icloud"
  	     "com.apple.preferences.internetaccounts"
  	     "com.apple.preferences.parentalcontrols"
  	     "com.apple.preferences.password"
  	     "com.apple.preferences.sharing"
  	     "com.apple.preferences.softwareupdate"
  	     "com.apple.preferences.users"
  	     "com.apple.preferences.wallet"
  	     "com.apple.prefpanel.fibrechannel"
  	     "com.apple.prefs.backup"
  	     "com.apple.Xsan"
  	     "com.apple.ClassroomSettings"
  	     "com.apple.Localization"
  	     "com.apple.preference.datetime"
  	     "com.apple.preference.desktopscreeneffect"
  	     "com.apple.preference.digihub.discs"
  	     "com.apple.preference.displays"
  	     "com.apple.preference.dock"
  	     "com.apple.preference.energysaver"
  	     "com.apple.preference.expose"
  	     "com.apple.preference.general"
  	     "com.apple.preference.ink"
  	     "com.apple.preference.keyboard"
  	     "com.apple.preference.mouse"
  	     "com.apple.preference.network"
  	     "com.apple.preference.notifications"
  	     "com.apple.preference.printfax"
  	     "com.apple.preference.screentime"
  	     "com.apple.preference.security"
  	     "com.apple.preference.sidecar"
  	     "com.apple.preference.sound"
  	     "com.apple.preference.speech"
  	     "com.apple.preference.spotlight"
  	     "com.apple.preference.startupdisk"
  	     "com.apple.preference.trackpad"
  	     "com.apple.preference.universalaccess"
  	     "com.apple.preferences.AppleIDPrefPane"
  	     "com.apple.preferences.appstore"
  	     "com.apple.preferences.Bluetooth"
  	     "com.apple.preferences.configurationprofiles"
  	     "com.apple.preferences.extensions"
  	     "com.apple.preferences.FamilySharingPrefPane"
  	     "com.apple.preferences.icloud"
  	     "com.apple.preferences.internetaccounts"
  	     "com.apple.preferences.parentalcontrols"
  	     "com.apple.preferences.password"
  	     "com.apple.preferences.sharing"
  	     "com.apple.preferences.softwareupdate"
  	     "com.apple.preferences.users"
  	     "com.apple.preferences.wallet"
  	     "com.apple.prefpanel.fibrechannel"
  	     "com.apple.prefs.backup"
  	     "com.apple.Xsan"
  	     "com.apple.Accessibility-Settings.extension"
  	     "com.apple.AirDrop-Handoff-Settings.extension"
  	     "com.apple.Battery-Settings.extension"
  	     "com.apple.BluetoothSettings"
  	     "com.apple.CD-DVD-Settings.extension"
  	     "com.apple.ClassKit-Settings.extension"
  	     "com.apple.Classroom-Settings.extension"
  	     "com.apple.ControlCenter-Settings.extension"
  	     "com.apple.Date-Time-Settings.extension"
  	     "com.apple.Desktop-Settings.extension"
  	     "com.apple.Displays-Settings.extension"
  	     "com.apple.ExtensionsPreferences"
  	     "com.apple.Family-Settings.extension"
  	     "com.apple.Focus-Settings.extension"
  	     "com.apple.Game-Center-Settings.extension"
  	     "com.apple.Game-Controller-Settings.extension"
  	     "com.apple.HeadphoneSettings"
  	     "com.apple.Internet-Accounts-Settings.extension"
  	     "com.apple.Keyboard-Settings.extension"
  	     "com.apple.Localization-Settings.extension"
  	     "com.apple.Lock-Screen-Settings.extension"
  	     "com.apple.LoginItems-Settings.extension"
  	     "com.apple.Mouse-Settings.extension"
  	     "com.apple.Network-Settings.extension"
  	     "com.apple.NetworkExtensionSettingsUI.NESettingsUIExtension"
  	     "com.apple.Notifications-Settings.extension"
  	     "com.apple.Passwords-Settings.extension"
  	     "com.apple.Print-Scan-Settings.extension"
  	     "com.apple.Screen-Time-Settings.extension"
  	     "com.apple.ScreenSaver-Settings.extension"
  	     "com.apple.Sharing-Settings.extension"
  	     "com.apple.Siri-Settings.extension"
  	     "com.apple.Software-Update-Settings.extension"
  	     "com.apple.Sound-Settings.extension"
  	     "com.apple.Startup-Disk-Settings.extension"
  	     "com.apple.Time-Machine-Settings.extension"
  	     "com.apple.Touch-ID-Settings.extension"
  	     "com.apple.Trackpad-Settings.extension"
  	     "com.apple.Transfer-Reset-Settings.extension"
  	     "com.apple.Users-Groups-Settings.extension"
  	     "com.apple.WalletSettingsExtension"
  	     "com.apple.Wallpaper-Settings.extension"
  	     "com.apple.settings.Storage"
  	     "com.apple.systempreferences.AppleIDSettings"
  	     "com.apple.wifi-settings-extension")))
#+end_src

Define a function to open preferences.
#+begin_src emacs-lisp :tangle yes :results none
  (defun open-system-preferences (name)
    (interactive "sName: ")
    (make-process :name "open-preferences"
  		:command `("open" ,(format "x-apple.systempreferences:%s" name))))
#+end_src

* media
** emms
Load emms with mpv backend. Add binding for transient-menu.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package emms
    :custom ((emms-player-list '(emms-player-mpv))
  	   (emms-volume-change-function #'emms-volume-mpv-change)
  	   (emms-volume-select-get-function #'emms-volume-mpv-get)
  	   (emms-source-file-default-directory "~/Music/"))
    :init (emms-minimalistic)
    :commands (emms emms-tmenu)
    :bind ("C-c e" . emms-tmenu))
#+end_src

Define infix for mpv playback speed and seek.
#+begin_src emacs-lisp :tangle yes :results none
  (defvar emms-player-mpv-speed 1)

  (transient-define-infix infix-emms-mpv-speed ()
    :class transient-lisp-variable
    :variable 'emms-player-mpv-speed
    :reader (lambda (prompt init _)
    	    (let* ((speed (read-number prompt init)))
    	      (emms-player-mpv-cmd `(set_property speed ,speed))
    	      speed)))

  (transient-define-infix infix-emms-seek-seconds ()
    :class transient-lisp-variable
    :variable 'emms-seek-seconds)
#+end_src

Change mpv volume with emms.
#+begin_src emacs-lisp :tangle yes :results none
  (defun emms-volume-mpv-change (amount)
    (emms-player-mpv-cmd `(add volume ,amount)
    		       (lambda (vol err)
    			 (unless err (message vol))))
    (emms-volume-mpv-get))
#+end_src

Define infix for mpv volume.
#+begin_src emacs-lisp :tangle yes :results none
  (defvar emms-player-mpv-volume 100)

  (transient-define-infix infix-emms-mpv-volume ()
    :class transient-lisp-variable
    :variable 'emms-player-mpv-volume
    :reader (lambda (prompt init _)
  	    (let* ((volume (read-number prompt init)))
  	      (emms-player-mpv-cmd `(set_property volume ,volume))
  	      volume)))
#+end_src

Format playback info.
#+begin_src emacs-lisp :tangle yes :results none
  (defun emms-playlist-current-track-info ()
    (if-let* ((track (emms-playlist-current-selected-track))
  	    (info (emms-track-description track)))
        (cond (emms-player-paused-p (format "[Paused]: %s" (propertize info 'face 'marginalia-off)))
  	    (t (format "[Playing]: %s" (propertize info 'face 'marginalia-on))))
      "No Playlist."))
#+end_src

Define emms-tmenu.
#+begin_src emacs-lisp :tangle yes :results none
  (transient-define-prefix emms-tmenu ()
    
    :transient-suffix 'transient--do-call
    :transient-non-suffix 'transient-do-quit
    
    [(:info #'emms-playlist-current-track-info)]
    
    ["--Actions--"
     
     ["Track"
      ("P" "Play/Pause" emms-pause)
      ("f" "Seek" emms-seek-forward)
      ("b" "Seek Backward" emms-seek-backward)]

     ["Playlist"
      ("s" "Stop" emms-stop)
      ("n" "Next Track" emms-next)
      ("p" "Previous Track" emms-previous)
      ("e" "Visit Playlist" emms :transient transient--do-exit)]
     
     ["Add"
      ("d" "Add Directory" emms-add-directory)
      ("D" "Add Directory Tree" emms-add-directory-tree)
      ("F" "Add File" emms-add-file)
      ("U" "Add URL" emms-add-url)]]

    ["--Options--"
     :class transient-row
     ("m" "Speed" infix-emms-mpv-speed)
     ("v" "Volume" infix-emms-mpv-volume)
     ("S" "Step" infix-emms-seek-seconds)])
#+end_src

Add emms handler for youtube urls.
#+begin_src emacs-lisp :tangle yes :results none
  (add-to-list 'browse-url-handlers
  	     `(,(rx string-start "http" (* "s") "://" (* "www.") (or "youtube.com/watch?" "youtu.be"))
  	       . (lambda (url &optional new-window)
  		   (emms-play-url url))))
#+end_src

** pdf
#+begin_src emacs-lisp :tangle yes :results none
  (use-package pdf-tools
    :vc (:url "https://github.com/vedang/pdf-tools.git")
    :init (pdf-tools-install))
#+end_src

** webkit
Set webkit default browser. Extract readable elements (when sensible) by default. Dismiss quickly. Display in a small pop-up side window.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package xwidget
    :bind (:map xwidget-webkit-mode-map
  	      ("q" . quit-window))
    :init (setq browse-url-browser-function #'xwidget-webkit-browse-url)
    :hook ((xwidget-webkit-mode . xwidget-webkit-readability-mode))
    :config
    
    (add-to-list 'browse-url-default-handlers
  	       '("\\`file:.*\\.html\\'" . xwidget-webkit-browse-url))
    
    (add-to-list 'display-buffer-alist
  	       '((major-mode . xwidget-webkit-mode)
  		 (display-buffer-in-side-window)
  		 (side . left)
  		 (window-width . 80)
  		 (body-function . select-window)))
    
    (with-eval-after-load 'popper
      (add-to-list 'popper-reference-buffers 'xwidget-webkit-mode)))
#+end_src

Add org-store-link backend for webkit.
#+begin_src emacs-lisp :tangle yes :results none
  (with-eval-after-load 'webkit
    (org-link-set-parameters "webkit" :follow #'browse-url :store #'org-webkit-store-link)
    (defun org-webkit-store-link (&optional interactive?)
      (let ((current-kill (car kill-ring))
            (current-url (xwidget-webkit-uri (xwidget-webkit-current-session)))
      	  (url))
        (when (eq major-mode #'xwidget-webkit-mode)
  	(setf url (if (org-url-p (or current-kill "")) current-kill current-url))
  	(org-link-store-props :type "webkit" :link url)))))
#+end_src

Set webkit as default handler for local and non-local html files.
#+begin_src emacs-lisp :tangle yes :results none
  (add-to-list 'browse-url-handlers `("\\`file://.*\\.html" . xwidget-webkit-browse-url))
  (add-to-list 'browse-url-handlers `("\\`https://.*\\.html" . xwidget-webkit-browse-url))
#+end_src

** gptel
#+begin_src emacs-lisp :tangle yes :results none
  (use-package gptel
    :init (gptel-make-anthropic "Claude" :stream t)
    :bind ("C-x g" . gptel-send))
#+end_src


* utilities
** embark
Load embark.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package embark
    :custom ((prefix-help-command #'embark-prefix-help-command)
  	   (embark-indicators '(embark-highlight-indicator
  				embark-isearch-highlight-indicator)))
    :bind (("C-." . embark-act)
  	 ("C-;" . embark-dwim)
  	 ("C-c C-e" . embark-collect)
  	 ("M-<space>" . embark-select)))
#+end_src


Add consult support to embark.
#+begin_src emacs-lisp :tangle yes :results none
  (use-package embark-consult
    :after (consult embark)
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

Prefer [[https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt][which-key indicator]] indicator (temporarily disabled due to a bug which rebinds "C-h" key).
#+begin_src emacs-lisp :tangle yes :results none
  ;; (with-eval-after-load 'embark

  ;;   (defun embark-which-key-indicator ()
  ;;     "An embark indicator that displays keymaps using which-key.
  ;; The which-key help message will show the type and value of the
  ;; current target followed by an ellipsis if there are further
  ;; targets."
  ;;     (lambda (&optional keymap targets prefix)
  ;;       (if (null keymap)
  ;;           (which-key--hide-popup-ignore-command)
  ;; 	(which-key--show-keymap
  ;; 	 (if (eq (plist-get (car targets) :type) 'embark-become)
  ;;              "Become"
  ;;            (format "Act on %s '%s'%s"
  ;;                    (plist-get (car targets) :type)
  ;;                    (embark--truncate-target (plist-get (car targets) :target))
  ;;                    (if (cdr targets) "…" "")))
  ;; 	 (if prefix
  ;;              (pcase (lookup-key keymap prefix 'accept-default)
  ;;                ((and (pred keymapp) km) km)
  ;;                (_ (key-binding prefix 'accept-default)))
  ;;            keymap)
  ;; 	 nil nil t (lambda (binding)
  ;;                      (not (string-suffix-p "-argument" (cdr binding))))))))

  ;;   (defun embark-hide-which-key-indicator (fn &rest args)
  ;;     "Hide the which-key indicator immediately when using the completing-read prompter."
  ;;     (which-key--hide-popup-ignore-command)
  ;;     (let ((embark-indicators
  ;;            (remq #'embark-which-key-indicator embark-indicators)))
  ;;       (apply fn args)))

  ;;   (advice-add #'embark-completing-read-prompter
  ;;               :around #'embark-hide-which-key-indicator))
#+end_src

Resize embark-collect buffers automatically.
#+begin_src emacs-lisp :tangle yes :results none
  (add-hook 'embark-collect-post-revert-hook
            (defun resize-embark-collect-window (&rest _)
              (when (memq embark-collect--kind '(:live :completions))
                (fit-window-to-buffer (get-buffer-window)
                                      (floor (frame-height) 2) 1))))
#+end_src

** avy
#+begin_src emacs-lisp :tangle yes :results none
  (use-package avy
    :bind ("M-j" . avy-jump))
#+end_src
